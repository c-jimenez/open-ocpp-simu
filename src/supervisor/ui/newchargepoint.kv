#:kivy 1.0

# MIT License

# Copyright (c) 2022 Cedric Jimenez

# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

# New charge point
<NewChargePointWidget>:
    orientation: 'vertical'

    cp_id: ti_cp_id.text
    type: type_spinner.text
    vendor: ti_vendor.text
    model: ti_model.text
    serial: ti_serial.text
    nb_phases: sl_nb_phases.value
    max_setpoint: sl_max_setpoint.value
    max_setpoint_per_connector: sl_max_setpoint_per_connector.value
    nb_connectors: sl_nb_connectors.value
    central_system: ti_central_system.text
    operating_voltage: sl_operating_voltage.value
    smart_charge_enabled: ch_smart_charge_enabled.active

    cancel: False
    popup: None

    size_hint: None, None
    size: 400, 440
    

    BoxLayout:
        size_hint_y: None
        height: dp(50)
        padding: dp(10)
        spacing: dp(10)
        Label:
            text: 'Charge point Type (AC/DC)'
            text_size: self.size
            halign: 'center'
            valign: 'middle'
            size_hint: None, 1.
            size: 150, 0
        Spinner:
            id: type_spinner
            text: 'AC'
            values: ['AC', 'DC']
            on_text:
                root.type = type_spinner.text
                sl_nb_phases.value = 1 if type_spinner.text == 'DC' else 3

    BoxLayout:
        orientation: 'horizontal'
        padding: 5
        spacing: 5
        size_hint: None, None
        size: 400, 40

        Label:
            text: 'Smart Charge Enabled'
            text_size: self.size
            halign: 'center'
            valign: 'middle'
            size_hint: None, 1.
            size: 150, 0

        CheckBox:
            id: ch_smart_charge_enabled
            active: True

    BoxLayout:
        orientation: 'horizontal'
        padding: 5
        spacing: 5
        size_hint: None, None
        size: 400, 40

        Label:
            text: 'Charge Point Identifier'
            text_size: self.size
            halign: 'center'
            valign: 'middle'
            size_hint: None, 1.
            size: 150, 0

        TextInput:
            id: ti_cp_id
            text: 'Simulated_CP_'
            size_hint: 1., 1.
            size: 0, 0
            multiline: False
            focus: True

    BoxLayout:
        orientation: 'horizontal'
        padding: 5
        spacing: 5
        size_hint: None, None
        size: 400, 40

        Label:
            text: 'Vendor'
            text_size: self.size
            halign: 'center'
            valign: 'middle'
            size_hint: None, 1.
            size: 150, 0

        TextInput:
            id: ti_vendor
            text: 'OpenOCPP AC'  if root.type =='AC'  else 'OpenOCPP DC'
            size_hint: 1., 1.
            size: 0, 0
            multiline: False

    BoxLayout:
        orientation: 'horizontal'
        padding: 5
        spacing: 5
        size_hint: None, None
        size: 400, 40

        Label:
            text: 'Model'
            text_size: self.size
            halign: 'center'
            valign: 'middle'
            size_hint: None, 1.
            size: 150, 0

        TextInput:
            id: ti_model
            text: 'OpenOCPP simu'
            size_hint: 1., 1.
            size: 0, 0
            multiline: False

    BoxLayout:
        orientation: 'horizontal'
        padding: 5
        spacing: 5
        size_hint: None, None
        size: 400, 40

        Label:
            text: 'S/N'
            text_size: self.size
            halign: 'center'
            valign: 'middle'
            size_hint: None, 1.
            size: 150, 0

        TextInput:
            id: ti_serial
            text: 'S/N-ABCD1234'
            size_hint: 1., 1.
            size: 0, 0
            multiline: False

    BoxLayout:
        id: nb_phases_box
        orientation: 'horizontal'
        padding: 5
        spacing: 5
        size_hint: None, None
        size: 400, 40
        opacity: 1  if root.type =='AC'  else 0

        Label:
            text: 'Number of phases'
            text_size: self.size
            halign: 'center'
            valign: 'middle'
            size_hint: None, 1.
            size: 150, 0

        Slider:
            id: sl_nb_phases
            min: 1
            max: 3
            value: 3
            step: 1
            orientation: 'horizontal'
            size_hint: 1., 1.
            size: 0, 0

        Label:
            text: str(sl_nb_phases.value)
            text_size: self.size
            halign: 'center'
            valign: 'middle'
            size_hint: None, 1.
            size: 50, 0

    BoxLayout:
        id: voltage_box
        orientation: 'horizontal'
        padding: 5
        spacing: 5
        size_hint: None, None
        size: 400, 40

        Label:
            text: 'Voltage'
            text_size: self.size
            halign: 'center'
            valign: 'middle'
            size_hint: None, 1.
            size: 150, 0

        Slider:
            id: sl_operating_voltage
            min: 1
            max: 800
            value: 230 if root.type =='AC'  else 400
            step: 1
            orientation: 'horizontal'
            size_hint: 1., 1.
            size: 0, 0

        Label:
            text: str(sl_operating_voltage.value)
            text_size: self.size
            halign: 'center'
            valign: 'middle'
            size_hint: None, 1.
            size: 50, 0

    BoxLayout:
        id: current
        orientation: 'horizontal'
        padding: 5
        spacing: 5
        size_hint: None, None
        size: 400, 40

        Label:
            id: max_setpoint
            text: 'Max power' if root.type =='DC'  else 'Max current'
            text_size: self.size
            halign: 'center'
            valign: 'middle'
            size_hint: None, 1.
            size: 150, 0

        Slider:
            id: sl_max_setpoint
            min: 1
            max: 64 if root.type =='AC' else 500
            value: 32 if root.type =='AC' else 300
            step: 1
            orientation: 'horizontal'
            size_hint: 1., 1.
            size: 0, 0

        Label:
            id: max_current_value
            text: str(sl_max_setpoint.value) + 'Kw'  if root.type =='DC'  else str(sl_max_setpoint.value) + 'A'
            text_size: self.size
            halign: 'center'
            valign: 'middle'
            size_hint: None, 1.
            size: 50, 0

    BoxLayout:
        id: max_connector_current
        orientation: 'horizontal'
        padding: 5
        spacing: 5
        size_hint: None, None
        size: 400, 40

        Label:
            text: 'Max connector power'  if root.type == 'DC'  else 'Max connector current'
            text_size: self.size
            halign: 'center'
            valign: 'middle'
            size_hint: None, 1.
            size: 150, 0

        Slider:
            id: sl_max_setpoint_per_connector
            min: 1
            max: sl_max_setpoint.value
            value: 1  
            step: 1
            orientation: 'horizontal'
            size_hint: 1., 1.
            size: 0, 0

        Label:
            text: str(sl_max_setpoint_per_connector.value) + 'Kw'  if root.type =='DC'  else str(sl_max_setpoint_per_connector.value) + 'A'
            text_size: self.size
            halign: 'center'
            valign: 'middle'
            size_hint: None, 1.
            size: 50, 0

    BoxLayout:
        orientation: 'horizontal'
        padding: 5
        spacing: 5
        size_hint: None, None
        size: 400, 40

        Label:
            text: 'Number of connectors'
            text_size: self.size
            halign: 'center'
            valign: 'middle'
            size_hint: None, 1.
            size: 150, 0

        Slider:
            id: sl_nb_connectors
            min: 1
            max: 10
            value: 1
            step: 1
            orientation: 'horizontal'
            size_hint: 1., 1.
            size: 0, 0

        Label:
            text: str(sl_nb_connectors.value)
            text_size: self.size
            halign: 'center'
            valign: 'middle'
            size_hint: None, 1.
            size: 50, 0

    BoxLayout:
        orientation: 'horizontal'
        padding: 5
        spacing: 5
        size_hint: None, None
        size: 400, 40

        Label:
            text: 'Central System URL'
            text_size: self.size
            halign: 'center'
            valign: 'middle'
            size_hint: None, 1.
            size: 150, 0

        TextInput:
            id: ti_central_system
            text: 'ws://127.0.0.1:8080/openocpp/'
            size_hint: 1., 1.
            size: 0, 0
            multiline: False

    BoxLayout:
        orientation: 'horizontal'
        padding: 5
        spacing: 5
        size_hint: None, None
        size: 400, 40

        Button:
            id: bt_ok
            text: 'Ok'
            text_size: self.size
            halign: 'center'
            valign: 'middle'
            size_hint: 1., 1.

            on_release:
                root.cancel = False
                root.popup.dismiss()

        Button:
            id: bt_cancel
            text: 'Cancel'
            text_size: self.size
            halign: 'center'
            valign: 'middle'
            size_hint: 1., 1.

            on_release: 
                root.cancel = True
                root.popup.dismiss()